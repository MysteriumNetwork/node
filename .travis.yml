sudo: true
os: linux
language: go
go: [1.9.2]
go_import_path: github.com/mysterium/node

env:
  global:
    - CACHE_ROOT_DIR=$HOME/cache
    - BUILD_TOOLS_PATH=$CACHE_ROOT_DIR/build_tools
    - BUILD_COMMIT=$TRAVIS_COMMIT
    - BUILD_BRANCH=$TRAVIS_BRANCH
    - BUILD_NUMBER=$TRAVIS_BUILD_NUMBER
    - BUILD_VERSION_MAJOR=0

before_install:
  - export BUILD_VERSION=${TRAVIS_TAG:-"$BUILD_VERSION_MAJOR-dev.$TRAVIS_BUILD_NUMBER"}

cache:
  directories:
    - "$CACHE_ROOT_DIR"
    - vendor

stages:
  - dep-cache
  - test
  - name: build
    if: (type != pull_request AND branch = master AND tag IS blank) OR tag IS present
  - name: release-dev
    if: type != pull_request AND branch = master AND tag IS blank
  - name: release
    if: tag IS present

jobs:
  include:
    # Dependencies cache stage
    - stage: dep-cache
      name: "Vendor update"
      script:
        - go get github.com/tools/godep
        - dep ensure

    # Test stage
    - stage: test
      script: bin/check_vet
      name: "Vet check"

    - script: bin/builder_run bin/check_lint
      name: "Linter"

    - script: bin/check_fmt
      name: "Formating check"

    - script: bin/check_license
      name: "License check"

    - script: bin/test
      name: "Unit tests"

    - script: bin/test_e2e
      name: "End-to-end tests"
      if: type = pull_request

    # Build artifacts
    - stage: build
      script:
      - BINARY=build/server/mysterium_server_linux_amd64 bin/server_package_standalone linux
      - BINARY=build/client/mysterium_client_linux_amd64 bin/client_package_standalone linux
      - bin/s3 sync build/package s3://build-artifacts
      name: "Linux packages"

    - script:
      - bin/builder_run BINARY=build/server/mysterium_server bin/server_package_debian $BUILD_VERSION amd64
      - bin/builder_run BINARY=build/client/mysterium_client bin/client_package_debian $BUILD_VERSION amd64
      - bin/s3 sync build/package s3://build-artifacts
      name: "DEB packages"

    - script:
      - BINARY=build/server/mysterium_server_darwin_amd64 bin/server_package_standalone darwin
      - BINARY=build/client/mysterium_client_darwin_amd64 bin/client_package_standalone darwin
      - bin/s3 sync build/package s3://build-artifacts
      name: "OSX packages"

    - script:
      - BINARY=build/server/mysterium_server_windows_amd64.exe bin/server_package_standalone windows
      - BINARY=build/client/mysterium_client_windows_amd64.exe bin/client_package_standalone windows
      - bin/s3 sync build/package s3://build-artifacts
      name: "Windows packages"

    - script:
      - bin/server_package_docker
      - docker save mysterium-node:alpine | gzip > mysterium-node_alpine.tgz
      - bin/s3 cp mysterium-node_alpine.tgz s3://docker-images
      name: "Alpine docker image for node"

    - script:
      - bin/client_package_docker
      - docker save mysterium-client:alpine | gzip > mysterium-client_alpine.tgz
      - bin/s3 cp mysterium-client_alpine.tgz s3://docker-images
      name: "Alpine docker image for client"

    - script:
      - bin/server_package_docker_ubuntu $BUILD_VERSION
      - docker save mysterium-node:ubuntu | gzip > mysterium-node_ubuntu.tgz
      - bin/s3 cp mysterium-node_ubuntu.tgz s3://docker-images
      name: "Ubuntu docker image for node"

    - script:
      - bin/client_package_docker_ubuntu $BUILD_VERSION
      - docker save mysterium-client:ubuntu | gzip > mysterium-client_ubuntu.tgz
      - bin/s3 cp mysterium-client_ubuntu.tgz s3://docker-images
      name: "Ubuntu docker image for client"

    # Development bleeding-edge release (on master commits only)
    - stage: release-dev
      script: bin/s3 sync s3://build-artifacts build/package
      name: "Update for build-artifacts"
      deploy:
        provider: pages
        local-dir: build/package
        skip-cleanup: true
        github-token: "$GIT_RELEASES_API_KEY"
        keep-history: false
        target-branch: mysterium-node
        repo: MysteriumNetwork/build-artifacts

    - script:
      - bin/s3 sync s3://docker-images build/docker
      - docker load -i build/docker/mysterium-node_alpine.tgz
      - docker load -i build/docker/mysterium-client_alpine.tgz
      - docker load -i build/docker/mysterium-node_ubuntu.tgz
      - docker load -i build/docker/mysterium-client_ubuntu.tgz
      - bin/release_docker dev
      name: "Pushing dev docker images"

    # Official release (on tags only)
    - stage: release
      script: bin/s3 sync s3://build-artifacts build/package
      name: "Official release (on tags only)"
      deploy:
        provider: releases
        file_glob: true
        file: build/package/*
        skip_cleanup: true
        api_key: "$GIT_RELEASES_API_KEY"
    - script: bin/release_docker $TRAVIS_TAG latest
      name: "Pushing release to hub.docker.com"

notifications:
  slack:
    rooms:
      - secure: >
          uzg7QbKd09rm6q/7iXk1HFfXo61vqFbENueRM/a6Jg+o2/YZEQXtKLO+gLg2gY/4ok9P4goUF8PuAA1/YLnhzJAr0ks35z69kns36E2eJkU2kB72D8
          K44Mi5fhPFrcbbkPPqFtMoeXUkEjNvB6LT3w0xpWOUBS68N/HJrpi2Y3kn1tp96tcsneLyBick3JrlJc3aptHq/bNFLaWFS9orzcp9wWDjxNeWaVze
          GM0Y1GCFQymff9UOf2r6Vy/MjESo9QjHH+gJbEzH13d6YcBi2ktZF3c6ZDqsjOOQZKQzwrgYk6sVLQsikDtA0vPgXVVyTVgcYmdTrNF6K/31Dt/e3K
          gJXvpwn6tsW6o2DJJpq4MXFOm2z+S20KNbhSj5BLzYmVOKnJhyDAFFYWLDfF0ZJs3D0Pezjtu8HsMvkX3REYXUaBEZuRR4GRV4iqCdyHWKR+WGtX7Y
          FfsaolqNiWAqHaACH5jL2oZ4DcwF3x0LfEpESJYJrmmUsCl0/siBe9e5zL3mpwdJ7vG2rH8XUsEJvHf5A8YSYOSLE06lPpioNjskKoGYT0/c8VNAty
          OvkdfTsWhz6oCOAZyJsQPuW1vEkjdK/mkrj38g0K4RnMQ05aVbLlHkH+1OUzzPl/NVydoDYdTlkCYTDSL3vrD/Uh5uu57FDssUkz/joiuzixNkePo=
    on_success: change
    on_failure: always
